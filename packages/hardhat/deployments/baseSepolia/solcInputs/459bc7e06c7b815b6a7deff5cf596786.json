{
  "language": "Solidity",
  "sources": {
    "contracts/CrimeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/**\n * @title CrimeRegistry\n * @notice Smart contract for recording and managing crime reports across metro systems\n * @dev Designed for The Graph indexing and cross-metro analysis\n */\n\ncontract CrimeRegistry {\n    \n    // ==================== STRUCTS ====================\n    \n    struct Station {\n        string id;                    // e.g., \"termini-rome\"\n        string name;                  // Human readable name\n        string metro;                 // e.g., \"rome\"\n        string lines;                 // Comma-separated lines (e.g., \"A,B,C\")\n        uint256 lineOrder;            // Order on the line (for visualization)\n        bool active;\n        uint256 createdAt;\n    }\n    \n    struct CrimeReport {\n        uint256 id;\n        string stationId;\n        address reporter;             // Address(0) for anonymous\n        uint8 severity;               // 0-10 scale\n        string description;\n        uint256 timestamp;\n        bool verified;                // true if user paid gas themselves\n    }\n    \n    // ==================== STATE VARIABLES ====================\n    \n    address public owner;\n    \n    // Station storage\n    mapping(string => Station) public stations;           // stationId => Station\n    mapping(string => bool) public stationExists;\n    string[] public stationIds;\n    \n    // Crime reports storage\n    mapping(uint256 => CrimeReport) public reports;       // reportId => CrimeReport\n    mapping(string => uint256[]) public stationReports;   // stationId => reportIds\n    uint256 public reportCount;\n    \n    // Rate limiting for anonymous reports\n    mapping(address => uint256) public lastReportTime;    // ip/address => timestamp\n    mapping(address => uint256) public reportCountToday;  // ip/address => count\n    \n    // ==================== EVENTS ====================\n    \n    event StationCreated(\n        string stationId,\n        string name,\n        string metro\n    );\n    \n    event StationUpdated(string indexed stationId);\n    \n    event CrimeReportSubmitted(\n        uint256 indexed reportId,\n        string stationId,\n        address indexed reporter,\n        uint8 severity,\n        uint256 timestamp,\n        bool verified,\n        string cid\n    );\n    \n    event AnonymousReportSubmitted(\n        uint256 indexed reportId,\n        string stationId,\n        uint8 severity,\n        uint256 timestamp,\n        string cid\n    );\n    \n    // ==================== MODIFIERS ====================\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this\");\n        _;\n    }\n    \n    modifier stationMustExist(string memory _stationId) {\n        require(stationExists[_stationId], \"Station does not exist\");\n        _;\n    }\n    \n    modifier validSeverity(uint8 _severity) {\n        require(_severity >= 0 && _severity <= 10, \"Severity must be 0-10\");\n        _;\n    }\n    \n    modifier validDescription(string memory _description) {\n        bytes memory descBytes = bytes(_description);\n        require(descBytes.length >= 5 && descBytes.length <= 500, \"Description must be 5-500 chars\");\n        _;\n    }\n    \n    modifier rateLimit(address _address) {\n        uint256 timeSinceLastReport = block.timestamp - lastReportTime[_address];\n        require(timeSinceLastReport >= 5 minutes, \"Rate limit: wait 5 mins between reports\");\n        _;\n    }\n    \n    // ==================== CONSTRUCTOR ====================\n    \n    constructor() {\n        owner = msg.sender;\n        reportCount = 0;\n    }\n    \n    // ==================== STATION MANAGEMENT ====================\n    \n    /**\n     * @notice Create a new metro station\n     * @param _stationId Unique identifier (e.g., \"termini-rome\")\n     * @param _name Human-readable station name\n     * @param _metro Metro system identifier (e.g., \"rome\")\n     * @param _lines Comma-separated line codes (e.g., \"A,B,C\")\n     * @param _lineOrder Order on the primary line for visualization\n     */\n    function createStation(\n        string memory _stationId,\n        string memory _name,\n        string memory _metro,\n        string memory _lines,\n        uint256 _lineOrder\n    ) external onlyOwner {\n        require(!stationExists[_stationId], \"Station already exists\");\n        require(bytes(_stationId).length > 0, \"Station ID cannot be empty\");\n        \n        stations[_stationId] = Station({\n            id: _stationId,\n            name: _name,\n            metro: _metro,\n            lines: _lines,\n            lineOrder: _lineOrder,\n            active: true,\n            createdAt: block.timestamp\n        });\n        \n        stationExists[_stationId] = true;\n        stationIds.push(_stationId);\n        \n        emit StationCreated(_stationId, _name, _metro);\n    }\n    \n    /**\n     * @notice Deactivate a station (soft delete)\n     */\n    function deactivateStation(string memory _stationId) \n        external \n        onlyOwner \n        stationMustExist(_stationId) \n    {\n        stations[_stationId].active = false;\n        emit StationUpdated(_stationId);\n    }\n    \n    /**\n     * @notice Reactivate a station\n     */\n    function activateStation(string memory _stationId) \n        external \n        onlyOwner \n        stationMustExist(_stationId) \n    {\n        stations[_stationId].active = true;\n        emit StationUpdated(_stationId);\n    }\n    \n    // ==================== CRIME REPORTING ====================\n    \n    /**\n     * @notice Submit a verified crime report (user pays gas, signed by reporter)\n     * @param _stationId Station identifier\n     * @param _severity Severity level 0-10\n     * @param _description Report description\n     * @param _cid IPFS CID of the report\n     */\n    function submitVerifiedReport(\n        string memory _stationId,\n        uint8 _severity,\n        string memory _description,\n        string memory _cid\n    ) \n        external \n        stationMustExist(_stationId)\n        validSeverity(_severity)\n        validDescription(_description)\n        returns (uint256)\n    {\n        require(stations[_stationId].active, \"Station is not active\");\n        \n        uint256 reportId = reportCount;\n        reportCount++;\n        \n        CrimeReport memory newReport = CrimeReport({\n            id: reportId,\n            stationId: _stationId,\n            reporter: msg.sender,\n            severity: _severity,\n            description: _description,\n            timestamp: block.timestamp,\n            verified: true\n        });\n        \n        reports[reportId] = newReport;\n        stationReports[_stationId].push(reportId);\n        \n        emit CrimeReportSubmitted(\n            reportId,\n            _stationId,\n            msg.sender,\n            _severity,\n            block.timestamp,\n            true,\n            _cid\n        );\n        \n        return reportId;\n    }\n    \n    /**\n     * @notice Submit an anonymous crime report (backend/relayer pays gas)\n     * @param _stationId Station identifier\n     * @param _severity Severity level 0-10\n     * @param _description Report description\n     * @param _cid IPFS CID of the report\n     * @dev Only owner (backend relayer) can call this for anonymous reports\n     * @dev This is for guest reports where you (the owner) pay the gas\n     */\n    function submitAnonymousReport(\n        string memory _stationId,\n        uint8 _severity,\n        string memory _description,\n        string memory _cid\n    ) \n        external \n        onlyOwner\n        stationMustExist(_stationId)\n        validSeverity(_severity)\n        validDescription(_description)\n        returns (uint256)\n    {\n        require(stations[_stationId].active, \"Station is not active\");\n        \n        uint256 reportId = reportCount;\n        reportCount++;\n        \n        CrimeReport memory newReport = CrimeReport({\n            id: reportId,\n            stationId: _stationId,\n            reporter: address(0),                // Anonymous\n            severity: _severity,\n            description: _description,\n            timestamp: block.timestamp,\n            verified: false\n        });\n        \n        reports[reportId] = newReport;\n        stationReports[_stationId].push(reportId);\n        \n        emit AnonymousReportSubmitted(\n            reportId,\n            _stationId,\n            _severity,\n            block.timestamp,\n            _cid\n        );\n        \n        return reportId;\n    }\n    \n    // ==================== QUERIES ====================\n    \n    /**\n     * @notice Get all stations\n     */\n    function getAllStations() \n        external \n        view \n        returns (Station[] memory) \n    {\n        Station[] memory allStations = new Station[](stationIds.length);\n        for (uint256 i = 0; i < stationIds.length; i++) {\n            allStations[i] = stations[stationIds[i]];\n        }\n        return allStations;\n    }\n    \n    /**\n     * @notice Get a specific station\n     */\n    function getStation(string memory _stationId) \n        external \n        view \n        stationMustExist(_stationId)\n        returns (Station memory) \n    {\n        return stations[_stationId];\n    }\n    \n    /**\n     * @notice Get all reports for a station\n     */\n    function getStationReports(string memory _stationId) \n        external \n        view \n        stationMustExist(_stationId)\n        returns (CrimeReport[] memory) \n    {\n        uint256[] memory reportIds = stationReports[_stationId];\n        CrimeReport[] memory stationCrimeReports = new CrimeReport[](reportIds.length);\n        \n        for (uint256 i = 0; i < reportIds.length; i++) {\n            stationCrimeReports[i] = reports[reportIds[i]];\n        }\n        \n        return stationCrimeReports;\n    }\n    \n    /**\n     * @notice Get a specific report\n     */\n    function getReport(uint256 _reportId) \n        external \n        view \n        returns (CrimeReport memory) \n    {\n        require(_reportId < reportCount, \"Report does not exist\");\n        return reports[_reportId];\n    }\n    \n    /**\n     * @notice Get number of reports for a station\n     */\n    function getStationReportCount(string memory _stationId) \n        external \n        view \n        stationMustExist(_stationId)\n        returns (uint256) \n    {\n        return stationReports[_stationId].length;\n    }\n    \n    /**\n     * @notice Get total number of stations\n     */\n    function getStationCount() \n        external \n        view \n        returns (uint256) \n    {\n        return stationIds.length;\n    }\n    \n    /**\n     * @notice Get total number of reports\n     */\n    function getTotalReportCount() \n        external \n        view \n        returns (uint256) \n    {\n        return reportCount;\n    }\n}"
    },
    "contracts/MockENSRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/**\n * @title MockENSRegistry\n * @notice Simple ENS-like registry mapping names to addresses\n */\ncontract MockENSRegistry {\n    \n    // ==================== STATE ====================\n    \n    address public owner;\n    \n    mapping(string => address) public names; // ensName => contract address\n    string[] public registeredNames;\n    \n    // ==================== EVENTS ====================\n    \n    event NameRegistered(string ensName, address contractAddress);\n    event NameUpdated(string ensName, address newAddress);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    // ==================== MODIFIERS ====================\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner\");\n        _;\n    }\n    \n    // ==================== CONSTRUCTOR ====================\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    // ==================== FUNCTIONS ====================\n    \n    /**\n     * @notice Register a name\n     */\n    function registerName(string memory _ensName, address _address) \n        external \n        onlyOwner \n    {\n        require(_address != address(0), \"Invalid address\");\n        require(names[_ensName] == address(0), \"Name already registered\");\n        \n        names[_ensName] = _address;\n        registeredNames.push(_ensName);\n        \n        emit NameRegistered(_ensName, _address);\n    }\n    \n    /**\n     * @notice Update an existing name\n     */\n    function updateName(string memory _ensName, address _newAddress) \n        external \n        onlyOwner \n    {\n        require(_newAddress != address(0), \"Invalid address\");\n        require(names[_ensName] != address(0), \"Name not registered\");\n        \n        names[_ensName] = _newAddress;\n        \n        emit NameUpdated(_ensName, _newAddress);\n    }\n    \n    /**\n     * @notice Resolve a name to an address\n     */\n    function resolve(string memory _ensName) \n        external \n        view \n        returns (address) \n    {\n        address resolved = names[_ensName];\n        require(resolved != address(0), \"Name not found\");\n        return resolved;\n    }\n    \n    /**\n     * @notice Check if a name is registered\n     */\n    function isRegistered(string memory _ensName) \n        external \n        view \n        returns (bool) \n    {\n        return names[_ensName] != address(0);\n    }\n    \n    /**\n     * @notice Get all registered names\n     */\n    function getAllNames() external view returns (string[] memory) {\n        return registeredNames;\n    }\n    \n    /**\n     * @notice Get registered name count\n     */\n    function getNameCount() external view returns (uint256) {\n        return registeredNames.length;\n    }\n    \n    /**\n     * @notice Transfer ownership\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"Invalid address\");\n        address oldOwner = owner;\n        owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
    },
    "contracts/Station.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/**\n * @title Station\n * @notice Individual station contract storing report CIDs and AI safety scores\n */\ncontract Station {\n    \n    // ==================== STATE ====================\n    \n    string public stationId;\n    string public name;\n    string public metro;\n    string public ensName;\n    address public factory;\n    \n    string[] public reportCIDs;\n    uint256 public aiSafetyScore; // 0-100\n    uint256 public lastUpdated;\n    \n    // ==================== EVENTS ====================\n    \n    event ReportAdded(string cid, uint256 timestamp);\n    event SafetyScoreUpdated(uint256 newScore, uint256 timestamp);\n    \n    // ==================== MODIFIERS ====================\n    \n    modifier onlyFactory() {\n        require(msg.sender == factory, \"Only factory can call\");\n        _;\n    }\n    \n    // ==================== CONSTRUCTOR ====================\n    \n    constructor(\n        string memory _stationId,\n        string memory _name,\n        string memory _metro,\n        string memory _ensName\n    ) {\n        stationId = _stationId;\n        name = _name;\n        metro = _metro;\n        ensName = _ensName;\n        factory = msg.sender;\n        aiSafetyScore = 50; // Default neutral score\n        lastUpdated = block.timestamp;\n    }\n    \n    // ==================== FUNCTIONS ====================\n    \n    /**\n     * @notice Add a report CID to this station\n     */\n    function addReportCID(string memory _cid) external onlyFactory {\n        reportCIDs.push(_cid);\n        lastUpdated = block.timestamp;\n        emit ReportAdded(_cid, block.timestamp);\n    }\n    \n    /**\n     * @notice Update AI safety score\n     */\n    function updateSafetyScore(uint256 _score) external onlyFactory {\n        require(_score <= 100, \"Score must be 0-100\");\n        aiSafetyScore = _score;\n        lastUpdated = block.timestamp;\n        emit SafetyScoreUpdated(_score, block.timestamp);\n    }\n    \n    /**\n     * @notice Get all report CIDs\n     */\n    function getReportCIDs() external view returns (string[] memory) {\n        return reportCIDs;\n    }\n    \n    /**\n     * @notice Get report count\n     */\n    function getReportCount() external view returns (uint256) {\n        return reportCIDs.length;\n    }\n    \n    /**\n     * @notice Get recent reports (last N)\n     */\n    function getRecentReports(uint256 _count) external view returns (string[] memory) {\n        uint256 length = reportCIDs.length;\n        if (_count > length) _count = length;\n        \n        string[] memory recent = new string[](_count);\n        for (uint256 i = 0; i < _count; i++) {\n            recent[i] = reportCIDs[length - _count + i];\n        }\n        return recent;\n    }\n}"
    },
    "contracts/StationFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"./Station.sol\";\nimport \"./MockENSRegistry.sol\";\n\n/**\n * @title StationFactory\n * @notice Deploys Station contracts and registers ENS names\n */\ncontract StationFactory {\n    \n    // ==================== STATE ====================\n    \n    address public owner;\n    MockENSRegistry public ensRegistry;\n    \n    mapping(string => address) public stations; // stationId => Station contract\n    string[] public stationIds;\n    \n    // ==================== EVENTS ====================\n    \n    event StationDeployed(\n        string stationId,\n        string name,\n        string ensName,\n        address stationContract\n    );\n    \n    // ==================== MODIFIERS ====================\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner\");\n        _;\n    }\n    \n    // ==================== CONSTRUCTOR ====================\n    \n    constructor(address _ensRegistry) {\n        owner = msg.sender;\n        ensRegistry = MockENSRegistry(_ensRegistry);\n    }\n    \n    // ==================== FUNCTIONS ====================\n    \n    /**\n     * @notice Deploy a new station contract and register ENS name\n     */\n    function deployStation(\n        string memory _stationId,\n        string memory _name,\n        string memory _metro,\n        string memory _ensName\n    ) external onlyOwner returns (address) {\n        require(stations[_stationId] == address(0), \"Station exists\");\n        \n        // Deploy Station contract\n        Station station = new Station(_stationId, _name, _metro, _ensName);\n        address stationAddress = address(station);\n        \n        // Store mapping\n        stations[_stationId] = stationAddress;\n        stationIds.push(_stationId);\n        \n        // Register in mock ENS\n        ensRegistry.registerName(_ensName, stationAddress);\n        \n        emit StationDeployed(_stationId, _name, _ensName, stationAddress);\n        \n        return stationAddress;\n    }\n\n    function registerENSName(string memory _ensName, address _address) \n        external \n        onlyOwner \n    {\n        ensRegistry.registerName(_ensName, _address);\n    }\n    \n    /**\n     * @notice Add report CID to a station\n     */\n    function addReportToStation(\n        string memory _stationId,\n        string memory _cid\n    ) external {\n        address stationAddress = stations[_stationId];\n        require(stationAddress != address(0), \"Station not found\");\n        \n        Station(stationAddress).addReportCID(_cid);\n    }\n    \n    /**\n     * @notice Update safety score for a station\n     */\n    function updateStationSafetyScore(\n        string memory _stationId,\n        uint256 _score\n    ) external onlyOwner {\n        address stationAddress = stations[_stationId];\n        require(stationAddress != address(0), \"Station not found\");\n        \n        Station(stationAddress).updateSafetyScore(_score);\n    }\n    \n    /**\n     * @notice Get station contract address by ID\n     */\n    function getStationAddress(string memory _stationId) \n        external \n        view \n        returns (address) \n    {\n        return stations[_stationId];\n    }\n    \n    /**\n     * @notice Get all station IDs\n     */\n    function getAllStationIds() external view returns (string[] memory) {\n        return stationIds;\n    }\n    \n    /**\n     * @notice Get station count\n     */\n    function getStationCount() external view returns (uint256) {\n        return stationIds.length;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}